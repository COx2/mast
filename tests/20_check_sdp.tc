
#include "mast.h"
#include "hext.h"

#suite SDP

#test test_mast_sdp_parse_string_just_v
mast_sdp_t sdp;
int result;

result = mast_sdp_parse_string("v=0\n", &sdp);
ck_assert_uint_eq(result, 0);
ck_assert_str_eq(sdp.address, "");
ck_assert_str_eq(sdp.port, "");
ck_assert_str_eq(sdp.session_id, "");
ck_assert_str_eq(sdp.session_origin, "");
ck_assert_str_eq(sdp.session_name, "");
ck_assert_str_eq(sdp.information, "");
ck_assert_int_eq(sdp.payload_type, 0);
ck_assert_int_eq(sdp.sample_size, 0);
ck_assert_int_eq(sdp.sample_rate, 0);
ck_assert_int_eq(sdp.channel_count, 0);
ck_assert_int_eq(sdp.packet_duration, 0);



#test test_mast_sdp_parse_file_lf
mast_sdp_t sdp;
int result;

result = mast_sdp_parse_file(FIXTURE_DIR "aes67-multicast-example.sdp", &sdp);
ck_assert_uint_eq(result, 0);
ck_assert_str_eq(sdp.address, "239.0.0.1");
ck_assert_str_eq(sdp.port, "5004");
ck_assert_str_eq(sdp.session_id, "1311738121");
ck_assert_str_eq(sdp.session_origin, "192.168.1.1");
ck_assert_str_eq(sdp.session_name, "Stage left I/O");
ck_assert_str_eq(sdp.information, "Channels 1-8");
ck_assert_int_eq(sdp.payload_type, 96);
ck_assert_int_eq(sdp.sample_size, 24);
ck_assert_int_eq(sdp.sample_rate, 48000);
ck_assert_int_eq(sdp.channel_count, 8);
ck_assert_int_eq(sdp.packet_duration, 1);



#test test_mast_sdp_parse_file_crlf
mast_sdp_t sdp;
int result;

result = mast_sdp_parse_file(FIXTURE_DIR "dante-aes67-1.sdp", &sdp);
ck_assert_uint_eq(result, 0);
ck_assert_str_eq(sdp.address, "239.65.125.63");
ck_assert_str_eq(sdp.port, "5004");
ck_assert_str_eq(sdp.session_id, "1423986");
ck_assert_str_eq(sdp.session_origin, "169.254.98.63");
ck_assert_str_eq(sdp.session_name, "AOIP44-serial-1614 : 2");
ck_assert_str_eq(sdp.information, "2 channels: TxChan 0, TxChan 1");
ck_assert_int_eq(sdp.payload_type, 97);
ck_assert_int_eq(sdp.sample_size, 24);
ck_assert_int_eq(sdp.sample_rate, 48000);
ck_assert_int_eq(sdp.channel_count, 2);
ck_assert_int_eq(sdp.packet_duration, 1);


#test test_mast_sdp_parse_file_doesnt_exist
mast_sdp_t sdp;
int result;

result = mast_sdp_parse_file(FIXTURE_DIR "doesnt_exist.sdp", &sdp);
ck_assert_uint_eq(result, -1);



#test test_sdp_xnode
mast_sdp_t sdp;
int result;

result = mast_sdp_parse_file(FIXTURE_DIR "xnode-l24-48000-2.sdp", &sdp);
ck_assert_uint_eq(result, 0);
ck_assert_str_eq(sdp.address, "239.192.10.5");
ck_assert_str_eq(sdp.port, "5004");
ck_assert_str_eq(sdp.session_id, "1");
ck_assert_str_eq(sdp.session_origin, "10.10.10.5");
ck_assert_str_eq(sdp.session_name, "Channel 501");
ck_assert_str_eq(sdp.information, "");
ck_assert_int_eq(sdp.payload_type, 96);
ck_assert_int_eq(sdp.sample_size, 24);
ck_assert_int_eq(sdp.sample_rate, 48000);
ck_assert_int_eq(sdp.channel_count, 2);
ck_assert_int_eq(sdp.packet_duration, 0);



#test test_defaults
mast_sdp_t sdp;
mast_sdp_set_defaults(&sdp);
ck_assert(sdp.address[0] == '\0');
ck_assert_str_eq(sdp.port, "5004");
ck_assert_int_eq(sdp.payload_type, -1);
ck_assert_int_eq(sdp.sample_size, 24);
ck_assert_int_eq(sdp.sample_rate, 48000);
ck_assert_int_eq(sdp.channel_count, 2);

#test test_set_address
mast_sdp_t sdp;
mast_sdp_set_defaults(&sdp);
mast_sdp_set_address(&sdp, "127.0.0.1");
ck_assert_str_eq(sdp.address, "127.0.0.1");
mast_sdp_set_address(&sdp, NULL);
ck_assert(sdp.address[0] == '\0');

#test test_set_port
mast_sdp_t sdp;
mast_sdp_set_defaults(&sdp);
mast_sdp_set_port(&sdp, "5004");
ck_assert_str_eq(sdp.port, "5004");
mast_sdp_set_port(&sdp, NULL);
ck_assert(sdp.port[0] == '\0');

#test test_set_sample_format_L16
mast_sdp_t sdp;
mast_sdp_set_sample_format(&sdp, "L16");
ck_assert_int_eq(sdp.sample_size, 16);

#test test_set_sample_format_L24
mast_sdp_t sdp;
mast_sdp_set_sample_format(&sdp, "L24");
ck_assert_int_eq(sdp.sample_size, 24);

#test test_set_sample_format_L32
mast_sdp_t sdp;
mast_sdp_set_sample_format(&sdp, "L32");
ck_assert_int_eq(sdp.sample_size, 32);

// FIXME: Travis does not support this
// #test-exit(-1) test_set_sample_format_PCM
// mast_sdp_t sdp;
// mast_sdp_set_sample_format(&sdp, "PCM");
